generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model Level {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  name      String @unique
  minPoints Int    @default(0)
  users     User[]
}

model User {
  id                   String              @id @default(auto()) @map("_id") @db.ObjectId
  email                String              @unique
  password             String?
  role                 Role                @default(MENTEE)
  googleId             String?             @unique
  facebookId           String?             @unique
  profile              Profile?
  sentRequests         MentorshipRequest[] @relation("MenteeRequests")
  receivedRequests     MentorshipRequest[] @relation("MentorRequests")
  mentorSessions       Session[]           @relation("MentorSessions")
  menteeSessions       Session[]           @relation("MenteeSessions")
  messages             Message[]
  notifications        Notification[]
  availabilities       Availability[]
  aiConversations      AIConversation[]
  googleAccessToken    String?
  googleRefreshToken   String?
  passwordResetToken   String?
  passwordResetExpires DateTime?
  conversations        Conversation[]      @relation(fields: [conversationIDs], references: [id])
  conversationIDs      String[]            @db.ObjectId
  points    Int     @default(0)
  levelId   String? @db.ObjectId
  level     Level?  @relation(fields: [levelId], references: [id])
  }

model Profile {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  bio       String?
  skills    String[]
  goals     String?
  avatarUrl String?
}

model MentorshipRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  menteeId  String   @db.ObjectId
  mentorId  String   @db.ObjectId
  status    String   @default("PENDING")
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // This line ensures the field is always updated

  // Relations
  mentee   User   @relation("MenteeRequests", fields: [menteeId], references: [id])
  mentor   User   @relation("MentorRequests", fields: [mentorId], references: [id])
  review   Review?
  goals    Goal[]
}

model Session {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  mentorId  String   @db.ObjectId
  menteeId  String   @db.ObjectId
  date      DateTime
  rating    Int?
  feedback  String?
  mentor    User     @relation("MentorSessions", fields: [mentorId], references: [id])
  mentee    User     @relation("MenteeSessions", fields: [menteeId], references: [id])
  createdAt DateTime @default(now())
}

model Review {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  mentorshipRequestId String            @unique @db.ObjectId
  mentorshipRequest   MentorshipRequest @relation(fields: [mentorshipRequestId], references: [id])
  rating              Int
  comment             String
  createdAt           DateTime          @default(now())
}

model Goal {
  id                  String            @id @default(auto()) @map("_id") @db.ObjectId
  mentorshipRequestId String            @db.ObjectId
  mentorshipRequest   MentorshipRequest @relation(fields: [mentorshipRequestId], references: [id])
  title               String
  description         String?
  isCompleted         Boolean           @default(false)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  category    String   @default("General")
  status      String   @default("InProgress")
  dueDate     DateTime?

  // S.M.A.R.T. components
  specific    String
  measurable  String
  achievable  String
  relevant    String
  timeBound   String
}

model Notification {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  userId    String           @db.ObjectId
  user      User             @relation(fields: [userId], references: [id])
  type      NotificationType
  message   String
  isRead    Boolean          @default(false)
  link      String?
  createdAt DateTime         @default(now())
}

model Availability {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  mentorId  String @db.ObjectId
  mentor    User   @relation(fields: [mentorId], references: [id])
  day       String // e.g., "Monday", "Tuesday"
  startTime String // e.g., "09:00"
  endTime   String // e.g., "17:00"
}

model Conversation {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  participants   User[]    @relation(fields: [participantIDs], references: [id])
  participantIDs String[]  @db.ObjectId
  messages       Message[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Message {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String       @db.ObjectId
  sender         User         @relation(fields: [senderId], references: [id])
  content        String
  createdAt      DateTime     @default(now())
}

model AIConversation {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  userId    String      @db.ObjectId
  user      User        @relation(fields: [userId], references: [id])
  title     String
  messages  AIMessage[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model AIMessage {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String         @db.ObjectId
  conversation   AIConversation @relation(fields: [conversationId], references: [id])
  sender         String // "USER" or "AI"
  content        String
  createdAt      DateTime       @default(now())
}

enum Role {
  MENTEE
  MENTOR
  ADMIN
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum NotificationType {
  NEW_MENTORSHIP_REQUEST
  MENTORSHIP_REQUEST_ACCEPTED
  MENTORSHIP_REQUEST_REJECTED
  SESSION_BOOKED
  SESSION_REMINDER
  NEW_MESSAGE
  GOAL_COMPLETED
  AVAILABILITY_UPDATED
}
